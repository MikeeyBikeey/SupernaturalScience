<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///wallmap settings

wall_top_spr = sWallTop;
wall_size = 16;
width = floor(room_width / wall_size);
height = floor(room_height / wall_size);

wallmap[0, 0] = -1;
wallsides[0, 0] = 0;
for(var yy = height - 1; yy &gt;= 0; --yy) {
    for(var xx = width - 1; xx &gt;= 0; --xx) {
        wallmap[xx, yy] = -1;
        wallsides[xx, yy] = 0;
    }
}

side_up = 1 &lt;&lt; 0;
side_right = 1 &lt;&lt; 1;
side_down = 1 &lt;&lt; 2;
side_left = 1 &lt;&lt; 3;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create wallmap from instances

with oWallParent {
    var w = other.width;
    var h = other.height;
    var wsize = other.wall_size;
    other.wallmap[
        clamp(floor(x / wsize), 0, w - 1),
        clamp(floor(y / wsize), 0, h - 1)
    ] = sprite_index;
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///find visible sides

for(var yy = 0; yy &lt; height; yy++) {
    for(var xx = 0; xx &lt; width; xx++) {
        WallmapUpdateSides(xx, yy);
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw tiles

var start_x = clamp(floor(view_xview[0] / wall_size), 0, width);
var start_y = clamp(floor(view_yview[0] / wall_size), 0, height);
var end_x = clamp(start_x + ceil(view_wview[0] / wall_size) + 1, start_x, width);
var end_y = clamp(start_y + ceil(view_hview[0] / wall_size) + 1, start_y, height);

// sides
for(var yy = start_y; yy &lt; end_y; ++yy) {
    for(var xx = start_x; xx &lt; end_x; ++xx) {
        if wallmap[xx, yy] != -1 {
            WallmapDrawWallSides(wallmap[xx, yy], xx * wall_size, yy * wall_size, 0, wallsides[xx, yy]);
        }
    }
}
// tops
for(var yy = start_y; yy &lt; end_y; ++yy) {
    for(var xx = start_x; xx &lt; end_x; ++xx) {
        if wallmap[xx, yy] != -1 {
            WallmapDrawWallTop(wallmap[xx, yy], wall_top_spr, xx * wall_size, yy * wall_size, 0);
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
